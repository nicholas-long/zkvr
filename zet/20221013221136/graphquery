#!/bin/bash

# Nicholas Long
# see documentation at zet/20221013221136/README.md

buf=$(mktemp)       # working set
temp=$(mktemp)      # used in operation
joined=$(mktemp)    # tempfile for intersections

interpret="$0"
human=0 # by default the script should return raw IDs as output, add --human flag to see readable links and titles
echo "query $@" > /dev/stderr

# fill initial working set
find zet -name README.md | awk -F / '{print $(NF-1)}' | sort -u > $buf

# loop over argument tokens and process each operation
while [[ $# -gt 0 ]]; do
  #echo "parsing $1" > /dev/stderr
  if [ -f "$1" -o -p "$1" ]; then # file or pipe
    #echo "got file $1" > /dev/stderr
    grep -Eo '[0-9]{14}' "$1" | sort -u > $temp
    join $buf $temp > $joined
    cp "$joined" "$buf"
  elif [[ "$1" =~ ^@.*$ ]]; then # tag
    tagname="$1"
    tagname=${tagname//@/}
    #echo "read tags $tagname" > /dev/stderr
    filename="tagindex/$tagname.md"
    if [ ! -f "$filename" ]; then
      echo "no tags for $tagname" > /dev/stderr
      exit 1
    fi
    implementation/parseids tagindex/$tagname.md | sort -u > $temp
    join $buf $temp > $joined
    cp "$joined" "$buf"
  elif [[ "$1" == '--human' ]]; then # human readable argument
    human=1
  elif [[ "$1" == 'like' ]]; then
    shift
    pattern="$1"
    #echo "like $pattern" > /dev/stderr
    awk '{print "zet/" $0 "/README.md"}' $buf |\
      xargs grep -i "$pattern" |\
      cut -d : -f 1 | implementation/parseids | sort -u > $temp
    join $buf $temp > $joined
    cp "$joined" "$buf"
  elif [[ "$1" == ':' || "$1" == 'refs' ]]; then
    cat $buf | xargs -n 1 ./zc refs | sort -u > $temp
    cp "$temp" "$buf"
  elif [[ "$1" == 'id' ]]; then
    shift
    echo $1 > $temp
    join $buf $temp > $joined
    cp "$joined" "$buf"
  elif [[ "$1" == 'or' ]]; then
    shift
    if [ -f "$1" -o -p "$1" ]; then
      #echo "got file $1" > /dev/stderr
      grep -Eo '[0-9]{14}' "$1" | sort -u > $temp
      cat $buf "$1" | sort -u > $joined
      cp "$joined" "$buf"
    else
      echo "not a file $1" > /dev/stderr
      exit 1
    fi
  elif [[ "$1" == 'not' ]]; then
    shift
    if [ -f "$1" -o -p "$1" ]; then
      #echo "got file $1" > /dev/stderr
      grep -Eo '[0-9]{14}' "$1" | sort -u > $temp
      join -v 1 $buf $temp > $joined
      cp "$joined" "$buf"
    else
      echo "not a file $1" > /dev/stderr
      exit 1
    fi
  elif [[ "$1" == 'taglist' ]]; then
    #zet/20221028023010/README.md
    shift
    list="$1"
    echo "$list" | \
      sed -e 's/[<>\|&#;"'\'']//g' -e 's/,/\n/g' | \
      awk '!/^$/ {print "tagindex/" $0 ".md"}' | \
      xargs sed -e 's/^.*zet\///' -e 's|/.*$||' | \
      sort -u > $temp
      join $buf $temp > $joined
      cp "$joined" "$buf"
  elif [[ "$1" == 'file' ]]; then
    shift
    if [ -f "$1" ]; then
      implementation/parseids "$1" | sort -u > $buf
    fi
  elif [[ "$1" == 'edges' ]]; then
    awk '
      ARGIND == 1 { ids[$0] = 1 }
      ARGIND == 2 {
        id = $0
        cmd = "./zc refs " id
        while ((cmd | getline) > 0) {
          if ($0 in ids) print id, $0
        }
      }
    ' $buf $buf # read it twice
    exit 0 # returning edge tuples instead of a set is terminal
  fi
  #echo "buffer contents:" > /dev/stderr
  #cat $buf > /dev/stderr
  shift
  if [ "$(wc -l $buf | awk '{print $1}')" -eq 0 ]; then
    echo "no more results" > /dev/stderr
    break
  fi
done

# final output of script
if [ $human == 0 ]; then
  cat $buf
else # print readable table with titles
  awk '
  /^[0-9]+$/ {
    id = $0
    command = "head -n 1 zet/" id "/README.md"
    command | getline header
    close(command)
    gsub(/# /,"",header)
    command = "tail -n 1 zet/" id "/README.md"
    command | getline tags
    close(command)
    gsub(/^ +/,"",tags)
    print "- [" id "](/zet/" id "/README.md)", header, tags
  }' $buf
fi

# cleanup
rm "$buf"
rm "$temp"
rm "$joined"
